using System;
using System.Collections.Generic;
using System.Text;

namespace NetBase
{
    class Unbox
    {
        /*
         * 拆箱与装箱就是值类型与引用类型的转换，她是值类型和引用类型之间的桥梁，
         * 他们可以相互转换的一个基本前提就是上面所说的：Object是.NET中的万物之源
         */
        public void Sample()
        {
            int x = 1023;
            object o = x; //装箱
            int y = (int)o; //拆箱
        }
        /*
         * 装箱：值类型转换为引用对象，一般是转换为System.Object类型或值类型实现的接口引用类型；
         * 拆箱：引用类型转换为值类型，注意，这里的引用类型只能是被装箱的引用类型对象；
         */

        /*
         * 由于值类型和引用类型在内存分配的不同，从内存执行角度看，
         * 拆箱与装箱就势必存在内存的分配与数据的拷贝等操作，这也是装箱与拆箱性能影响的根源。
         */



        /*装箱的过程
         * 装箱就是把值类型转换为引用类型，具体过程：
         1.在堆中申请内存，内存大小为值类型的大小，再加上额外固定空间（引用类型的标配：TypeHandle和同步索引块）；
         2.将值类型的字段值（x=1023）拷贝新分配的内存中；
         3.返回新引用对象的地址（给引用变量object o）
         装箱后内存有两个对象：一个是值类型变量x，另一个就是新引用对象o。
         */

        /*拆箱的过程*/

        /**/
        /**/
        /**/
        /**/
        /**/

    }
}
